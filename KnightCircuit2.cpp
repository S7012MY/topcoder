#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define x first
#define y second
#define LL long long
#define mp make_pair
using namespace std;

typedef pair<int, int> per;
typedef vector<int>::iterator it;
typedef set<int>::iterator is;
set<per> viz;
queue<per> c;

const int dx[]={ 2, 2,-2,-2,1, 1,-1,2},
		  dy[]={ 1,-1,-1,-1,2,-2, 2,-1};

int n,m;

bool check(int a,int b){ 
	return a>0 && b>0 && a<=n && b<=m;
}

int bfs(per z) {
	for(c.push(z);c.size(); c.pop()){ 
		per fr=c.front();
		viz.insert(fr);
		for(int d=0; d<8; ++d) {
			int ii=fr.x+dx[d],jj=fr.y+dy[d];
			if(check(ii,jj) && viz.find(mp(ii,jj))==viz.end()) c.push(mp(ii,jj));
		}
	}
	return viz.size();
}

struct KnightCircuit2 {
  int maxSize(int w, int h) {
  	int rez=0;
  	if(w>=4 && h>=4) return w*h;
  	else {
  		if(w>h) swap(w,h);
  		n=h; m=w;
  		for(int i=1; i<=min(10,h); ++i) for(int j=1; j<=min(10,w); ++j) {
  			viz.clear();
  			rez=max(rez,bfs(mp(i,j)));
  		}
  	}
	return rez;
  }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	KnightCircuit2 *obj;
	int answer;
	obj = new KnightCircuit2();
	clock_t startTime = clock();
	answer = obj->maxSize(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 1;
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 15;
	p1 = 2;
	p2 = 8;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 100;
	p1 = 100;
	p2 = 10000;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by [KawigiEdit] 2.0!





//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
